/* CLU GENERATED */
/* All structures and functions generated by CLU start with clug */
/*
Typical Usage:
    auto kernelFunctorName = clugCreate_MyKernelName();
    kernelFunctorName(
        cl::EnqueueArgs(cl::NDRange(numElements), cl::NDRange(numElements)), ...);

Exports:
    cl::Program clugCreate_vectorAdd(cl_int*)
*/

#include <CL/cl.hpp>
#include <functional>
#ifndef __CPPVectorAddKernel_cl_h
#define __CPPVectorAddKernel_cl_h

cl::Program clugGet_CPPVectorAddKernel_cl_h()
{
    static const char* src[1] = {
    /* 1*/ "kernel void vectorAdd(global const int *inputA, global const int *inputB, global int *output)\n"
    /* 2*/ "{\n"
    /* 3*/ "	output[get_global_id(0)] = inputA[get_global_id(0)] + inputB[get_global_id(0)];\n"
    /* 4*/ "}\n",
    };
    cl::Program::Sources sourceList;
    sourceList.push_back(
        std::pair<const char*, ::size_t>(src[0], strlen(src[0])));
    cl::Program program = cl::Program(cl::Context::getDefault(), sourceList);
    program.build();
    return program;
}

std::function<cl::Event (
    const cl::EnqueueArgs&, 
    cl::Buffer &, 
    cl::Buffer &, 
    cl::Buffer &
    )> 
clugCreate_vectorAdd() 
{
    std::function<cl::Event (
        const cl::EnqueueArgs&, 
        cl::Buffer &, 
        cl::Buffer &, 
        cl::Buffer &)> 
        kernelFunctor(cl::make_kernel<
            cl::Buffer &, 
            cl::Buffer &, 
            cl::Buffer &>
            (clugGet_CPPVectorAddKernel_cl_h(), "vectorAdd"));
    return kernelFunctor;
}

#endif

